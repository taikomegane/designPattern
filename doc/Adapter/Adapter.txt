Adapter パターン
= 提供されているものと、必要なものとの間に入って、その間を埋めるもの
= 「すでに提供されているもの」と「必要なもの」の間の「ずれ」を埋めるようなデザインパターン
= wrapperパターンと呼ばれることもある

Adapterパターンの種類
1. クラスによるAdapterパターン（継承を使ったもの）
2. インスタンスによるAdapterパターン（委譲を使ったもの）

登場人物
- Target（対象）
	- 必要となっているメソッドを定めている役
	- 例だとPrint interfaceやPrint class
- Client（依頼者）
	- Targetのメソッドを使って仕事をする役
	- 例だとMain
- Adaptee（適合される側）
	- すでに用意されているメソッドを持っている役
	- 例だとBanner class
- Adapter
	- Adapteeのメソッドを使って、Targetを満たすことが目的
	- クラスによるパターンの場合は、継承を使ってAdaptee役を利用する
	- インスタンスによるパターンの場合は、委譲を使ってAdaptee役を利用する
	
メリット
- すでに存在するクラスを利用することができる
- 必要とされるメソッド群を素早く作ることができる
- バグが出た場合、Adapterクラスを重点的に調べればよい
- バージョンアップ時にも、古いコードを捨てずに使うことができる

注意
- Adaptee役とTarget役があまりにもかけ離れている場合は使えない

関連パターン
1. Bridgeパターン
2. Decoratorパターン